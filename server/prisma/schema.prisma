generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String
  password      String
  avatarUrl     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  oauthClients  OAuthClient[]
}

model Goal {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  title       String
  description String
  statusId    Int      @default(1)
  status      Status   @relation(fields: [statusId], references: [id])
  targetDate  DateTime @default(now())
  tasks       Task[]
}

model Task {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  statusId    Int    @default(1)
  status      Status @relation(fields: [statusId], references: [id])
  goalId      Int
  goal        Goal   @relation(fields: [goalId], references: [id], onDelete: Cascade)
}

model Status {
  id    Int    @id @default(autoincrement())
  name  String @unique
  goals Goal[]
  tasks Task[]
}

model AuthorizationCode {
  id          String   @id @default(uuid())
  code        String   @unique
  clientId    String
  redirectUri String
  scope       String?
  state       String?
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@index([code])
  @@index([expiresAt])
}

model OAuthClient {
  id            String   @id @default(uuid())
  clientId      String   @unique
  clientSecret  String
  redirectUris  String   // Stored as JSON string
  grants        String   // Stored as JSON string
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String?  // Foreign key to User
  user          User?    @relation(fields: [userId], references: [id])
}
